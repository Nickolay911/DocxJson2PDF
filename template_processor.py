#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–±–ª–æ–Ω–æ–≤ docx —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ PDF
–ê–≤—Ç–æ—Ä: Nickolay911
–í–µ—Ä—Å–∏—è: 1.0
"""

import os
import subprocess
import json
import sys
from docx import Document

def replace_fields_in_docx(docx_path, replacements):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –ø–æ–ª—è –≤ docx –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    
    Args:
        docx_path (str): –ü—É—Ç—å –∫ docx —Ñ–∞–π–ª—É
        replacements (dict): –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω {–ø–æ–ª–µ: –∑–Ω–∞—á–µ–Ω–∏–µ}
    
    Returns:
        Document: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    """
    doc = Document(docx_path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    for paragraph in doc.paragraphs:
        for field, value in replacements.items():
            if field in paragraph.text:
                paragraph.text = paragraph.text.replace(field, value)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for field, value in replacements.items():
                    if field in cell.text:
                        cell.text = cell.text.replace(field, value)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ñ—É—Ç–µ—Ä–æ–≤
    for section in doc.sections:
        if section.header:
            for paragraph in section.header.paragraphs:
                for field, value in replacements.items():
                    if field in paragraph.text:
                        paragraph.text = paragraph.text.replace(field, value)
        
        if section.footer:
            for paragraph in section.footer.paragraphs:
                for field, value in replacements.items():
                    if field in paragraph.text:
                        paragraph.text = paragraph.text.replace(field, value)
    
    return doc

def convert_docx_to_pdf(docx_path, pdf_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç docx —Ñ–∞–π–ª –≤ PDF –∏—Å–ø–æ–ª—å–∑—É—è LibreOffice
    
    Args:
        docx_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É docx —Ñ–∞–π–ª—É
        pdf_path (str): –ñ–µ–ª–∞–µ–º—ã–π –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è PDF
        pdf_dir = os.path.dirname(os.path.abspath(pdf_path))
        if not pdf_dir:
            pdf_dir = "."
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º LibreOffice –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        cmd = [
            "libreoffice",
            "--headless", 
            "--convert-to", "pdf",
            "--outdir", pdf_dir,
            docx_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            raise Exception(f"–û—à–∏–±–∫–∞ LibreOffice: {result.stderr}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ PDF
        docx_basename = os.path.splitext(os.path.basename(docx_path))[0]
        temp_pdf = os.path.join(pdf_dir, f"{docx_basename}.pdf")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if temp_pdf != pdf_path and os.path.exists(temp_pdf):
            os.rename(temp_pdf, pdf_path)
        
        if not os.path.exists(pdf_path):
            raise Exception(f"PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {pdf_path}")
            
    except subprocess.TimeoutExpired:
        raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LibreOffice")
    except FileNotFoundError:
        raise Exception("LibreOffice –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install libreoffice")

def load_parameters_from_json(json_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–º–µ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
    
    Args:
        json_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–º–µ–Ω—ã
    """
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        raise Exception(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
    except json.JSONDecodeError as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(sys.argv) != 4:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 template_processor.py <template.docx> <params.json> <output.pdf>")
        print()
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("  template.docx  - –≤—Ö–æ–¥–Ω–æ–π —à–∞–±–ª–æ–Ω docx")
        print("  params.json    - JSON —Ñ–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–º–µ–Ω—ã")
        print("  output.pdf     - –≤—ã—Ö–æ–¥–Ω–æ–π PDF —Ñ–∞–π–ª")
        print()
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  python3 template_processor.py tpl.docx params.json result.pdf")
        sys.exit(1)
    
    template_path = sys.argv[1]
    json_path = sys.argv[2] 
    pdf_path = sys.argv[3]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(template_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
        sys.exit(1)
        
    if not os.path.exists(json_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        sys.exit(1)
    
    try:
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω: {template_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parameters = load_parameters_from_json(json_path)
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(parameters.keys())}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = replace_fields_in_docx(template_path, parameters)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π docx —Ñ–∞–π–ª
        temp_docx = f"temp_{os.path.basename(template_path)}"
        doc.save(temp_docx)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_docx}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PDF...")
        convert_docx_to_pdf(temp_docx, pdf_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_docx)
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! PDF —Å–æ–∑–¥–∞–Ω: {pdf_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 